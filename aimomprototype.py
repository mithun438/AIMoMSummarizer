# -*- coding: utf-8 -*-
"""AIMoMPrototype.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dtBuGXaHiIxKiDUYAuU1UwzjdWk-Gw32
"""

!pip install openai-whisper google-generativeai ffmpeg librosa soundfile
!apt-get install ffmpeg

from google.colab import files
import os

uploaded = files.upload()  # Upload an MP4 file
filename = list(uploaded.keys())[0]
video_path = os.path.join("/content/", filename)

print(f"‚úÖ Video File Uploaded: {video_path}")

import subprocess

def extract_audio(video_path, output_audio_path="/content/extracted_audio.wav"):
    print("‚è≥ Extracting audio from video...")
    command = f"ffmpeg -i {video_path} -vn -acodec pcm_s16le -ar 16000 -ac 1 {output_audio_path}"
    subprocess.run(command, shell=True, check=True)
    print(f"‚úÖ Audio extracted: {output_audio_path}")
    return output_audio_path

# Extract audio from the uploaded MP4 file
audio_path = extract_audio(video_path)

import whisper

def transcribe_audio(file_path):
    print("üìå Loading Whisper model...")
    model = whisper.load_model("large")  # Use "tiny" for speed, "base" for better accuracy

    print("‚è≥ Transcription in progress...")
    result = model.transcribe(file_path)

    print("‚úÖ Transcription complete!")
    return result["text"]

# Run transcription
transcript = transcribe_audio(audio_path)

print("\nüìå Transcribed Text (First 500 characters):\n", transcript[:500])

import google.generativeai as genai

# Configure Google Gemini API Key
genai.configure(api_key="AIzaSyAJjmDDsUExlSO4zMSFAbTxS5bks_U4NRc")

# Use the best model available
model = genai.GenerativeModel("models/gemini-1.5-pro-latest")

def summarize_text(transcript):
    prompt = f"""
    You are an AI meeting assistant.

    This is a raw transcript from a technical meeting. Fix any transcription errors related to:
    **Technical terms (5G, FsUE, carrier aggregation, APIs, etc.)**
    **People & team names**
    **Acronyms and abbreviations**
    **Grammar and clarity**

    Analyze the following meeting transcript and provide a structured summary including:
    1. **Key Discussion Points**
    2. **Decisions Made**
    3. **Action Items (with Assigned Persons & Deadlines if available)**
    4. **Technical Details (Code, APIs, Frameworks, or Specifications discussed)**
    5. **Challenges/Risks Identified**
    6. **Next Steps**

    Meeting Transcript:
    {transcript}
    """

    response = model.generate_content(prompt)
    return response.text

summary = summarize_text(transcript)

print("\nüìå **AI MoM - Meeting Summary:**\n", summary)

# Save summary to a text file
summary_filename = "/content/meeting_summary.txt"

with open(summary_filename, "w") as file:
    file.write(summary)

print(f"‚úÖ Summary saved as {summary_filename}")

!git config --global user.email "peddakalvamithun@gmail.com"
!git config --global user.name "mithun438"

!git clone https://github.com/mithun438/AIMoMSummarizer.git

!git add .


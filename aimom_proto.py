# -*- coding: utf-8 -*-
"""AIMoM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cwA70hLXu1h06b1666ioJ8qJGAUfqjH-
"""

!pip install openai-whisper google-generativeai ffmpeg librosa soundfile python-docx pandas
!apt-get install ffmpeg

from google.colab import files
import os
import subprocess
import whisper
import pandas as pd
from docx import Document
import google.generativeai as genai

#Upload MP4 or TXT/DOCX file
def upload_file():
    uploaded = files.upload()
    filename = list(uploaded.keys())[0]
    file_path = os.path.join("/content/", filename)

    print(f"File Uploaded: {file_path}")
    return file_path

uploaded_file_path = upload_file()

#Detection of file type
def detect_file_type(file_path):
    if file_path.lower().endswith(('.mp4', '.mkv', '.mov')):
        return "video"
    elif file_path.lower().endswith(('.txt', '.docx', '.csv')):
        return "text"
    else:
        return "unknown"

file_type = detect_file_type(uploaded_file_path)
print(f"Detected File Type: {file_type}")

#Extracting audio from video
def extract_audio(video_path, output_audio_path="/content/extracted_audio.wav"):
    print("Extracting audio from video...")

    command = f'ffmpeg -i "{video_path}" -q:a 0 -map a "{output_audio_path}"'

    try:
        subprocess.run(command, shell=True, check=True)
        print(f"Audio extracted successfully: {output_audio_path}")
        return output_audio_path
    except subprocess.CalledProcessError as e:
        print("Error extracting audio:", e)
        return None

# If the file type is video
if file_type == "video":
    audio_path = extract_audio(uploaded_file_path)

#Using whisper model to decode the audio
def transcribe_audio(file_path):
    print("Loading Whisper model...")
    model = whisper.load_model("large")  #Accuracy levels: tiny, medium, large

    print("Transcription in progress...")
    result = model.transcribe(file_path)

    print("Transcription complete!")
    return result["text"]

# If video was uploaded, transcribe the extracted audio
if file_type == "video":
    transcript = transcribe_audio(audio_path)

#Reading the transcript from the uploaded text file
def read_transcript(file_path):
    if file_path.endswith(".txt"):
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()

    elif file_path.endswith(".docx"):
        doc = Document(file_path)
        return "\n".join([para.text for para in doc.paragraphs])

    elif file_path.endswith(".csv"):
        df = pd.read_csv(file_path)
        return " ".join(df.iloc[:, 0].astype(str))  # Join first column as text

    return None

# If a text file was uploaded, read its contents
if file_type == "text":
    transcript = read_transcript(uploaded_file_path)

# Configure Google Gemini API Key
genai.configure(api_key="AIzaSyAJjmDDsUExlSO4zMSFAbTxS5bks_U4NRc")

# Use the best model available
model = genai.GenerativeModel("models/gemini-1.5-pro-latest")

def summarize_text(transcript):
    prompt = f"""
    You are an AI meeting assistant.

    This is a raw transcript from a technical meeting. Fix any transcription errors related to:
    **Technical terms (5G, FsUE, carrier aggregation, APIs, etc.)**
    **People & team names**
    **Acronyms and abbreviations**
    **Grammar and clarity**

    Analyze the following meeting transcript and provide a structured summary including:
    1. **Key Discussion Points**
    2. **Decisions Made**
    3. **Action Items (with Assigned Persons & Deadlines if available)**
    4. **Technical Details (Code, APIs, Frameworks, or Specifications discussed)**
    5. **Challenges/Risks Identified**
    6. **Next Steps**

    Meeting Transcript:
    {transcript}
    """

    response = model.generate_content(prompt)
    return response.text

summary = summarize_text(transcript)

print("\nðŸ“Œ **AI MoM - Meeting Summary:**\n", summary)

# Save summary to a text file
summary_filename = "/content/meeting_summary.txt"

with open(summary_filename, "w") as file:
    file.write(summary)

print(f"Summary saved as {summary_filename}")